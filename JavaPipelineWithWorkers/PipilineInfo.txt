Код main получает аргументы командной строки (файл с конфигами)
Конфиги оформляются в соответствии с правилами грамматики

// Устанавливает файл входного потока
INPUT = ... .txt 

// Устанавливаем выходной поток
OUTPUT = ... .txt 

// Устанавливаем класс ридера, через точку-запятую его конфиг.
READER_AND_CFG = Reader; ... .txt

WRITER_AND_CFG = Writer; ... .txt // Аналогично с writer

// Конвейер изначально не знает, какие именно поступают классы в качестве работы. Для реализации интроспекции
необходимо писать имя класса, а также конфиг файл через точку-запятую.
EXECUTOR_NAME_AND_CFG = LookUpTable; ... .txt; LookUpTable; ... .txt

// В конце можно установить порядок следования рабочих на конвейере.
ARRAY_OF_EXECUTOR_POS = 1; 2

У каждого работника также имеется конфиг со своей уникальной грамматикой. Все входные данные проходят синтаксическую и
семантическую проверку, прежде чем установить работника на конвейер.

Главный код менеджера конструирует весь конвейер, устанавливает конфиги, открывает входной и выходной поток, а также
выполняет минимальную проверку данных. После чего конвейер запускается посредством метода execute(). 
В момент установки рабочих, каждый из них начинает "знакомиться" друг с другом. Происходит обмен типами данных, которые работник может обработать, переслать далее по конвейеру. Общение при совпадении данных происходит через посредника, наследующего интерфейс IMediator. Посредник подготавливает данные к тому формату, который подходит следующему работнику на конвейере. Работа завершается при отправке команды Null.


 -----------------------------------------------
 |                       manager               |
 -----------------------------------------------
  |            |                               |
---------     -------------              ---------        
| reader| <-> | Executer 1 | <-> ... <-> | writer|
---------      ------------              --------- 